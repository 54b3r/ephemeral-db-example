version: '3.8'

services:
  dynamodb-local:
    image: amazon/dynamodb-local:latest
    container_name: dynamodb-local
    ports:
      - "8000:8000"
    command: ["-jar", "DynamoDBLocal.jar", "-inMemory", "-sharedDb"]
    environment:
      - AWS_ACCESS_KEY_ID=local
      - AWS_SECRET_ACCESS_KEY=local
      - AWS_DEFAULT_REGION=us-east-1
    healthcheck:
      test: ["CMD-SHELL", "java -cp DynamoDBLocal.jar com.amazonaws.services.dynamodbv2.local.main.ServerRunner -help > /dev/null 2>&1 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  pgair-db:
    image: postgis/postgis:15-3.4-alpine
    container_name: pgair-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: pgair
    ports:
      - "5432:5432"
    tmpfs:
      - /var/lib/postgresql/data
    volumes:
      - ./db/postgres/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

# Main Java API to run the airline backend, this should be updated to run both the airline and weather backends
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: airline-backend
    depends_on:
      pgair-db:
        condition: service_healthy
      dynamodb-local:
        condition: service_healthy
    ports:
      - "8080:8080"
    volumes:
      - app_temp:/app/tmp
    environment:
      # PostgreSQL Configuration
      SPRING_DATASOURCE_URL: jdbc:postgresql://pgair-db:5432/pgair
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      # DynamoDB Configuration
      AWS_DYNAMODB_ENDPOINT: http://dynamodb-local:8000
      AWS_ACCESS_KEY_ID: local
      AWS_SECRET_ACCESS_KEY: local
      AWS_REGION: us-east-1
      # Spring Boot Configuration
      SPRING_JPA_HIBERNATE_DDL_AUTO: validate
      SPRING_JPA_SHOW_SQL: "true"
      MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: "health,info,metrics"
      MANAGEMENT_ENDPOINT_HEALTH_PROBES_ENABLED: "true"
      MANAGEMENT_HEALTH_LIVENESSSTATE_ENABLED: "true"
      MANAGEMENT_HEALTH_READINESSSTATE_ENABLED: "true"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/actuator/health/liveness || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 40s

# Volumes configuration
volumes:
  # Volume for application temp files to prevent disk space issues
  app_temp:
    driver: local
  # Both databases are ephemeral (using tmpfs or in-memory)
